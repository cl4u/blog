import{_ as a,c as t,o as i,a5 as s}from"./chunks/framework.t2hUVk8X.js";const E=JSON.parse('{"title":"api 规范","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"doc/rule/development/index.md","filePath":"doc/rule/development/index.md","lastUpdated":1709812522000}'),e={name:"doc/rule/development/index.md"},n=s(`<h1 id="api-规范" tabindex="-1">api 规范 <a class="header-anchor" href="#api-规范" aria-label="Permalink to &quot;api 规范&quot;">​</a></h1><p>改目录下包含请求方式、接口入参、返回数据等内容。</p><h2 id="_1、请求方式" tabindex="-1">1、请求方式 <a class="header-anchor" href="#_1、请求方式" aria-label="Permalink to &quot;1、请求方式&quot;">​</a></h2><p>统一请求方式，增、删、改、查尽量统一使用 post 请求，下载文件使用 get 请求，post 请求 header 设置 Content-Type 使用以下两种</p><div class="tip custom-block"><p class="custom-block-title">Content-Type:</p><p>&quot;application/json&quot; 正常传参</p><p>&quot;multipart/form-data&quot; 文件上传</p></div><div class="warning custom-block"><p class="custom-block-title">警告</p><p>post 请求避免使用&quot;application/x-www-form-urlencoded&quot;请求头</p></div><h2 id="_2、请求入参" tabindex="-1">2、请求入参 <a class="header-anchor" href="#_2、请求入参" aria-label="Permalink to &quot;2、请求入参&quot;">​</a></h2><h3 id="_2-1-入参符合小驼峰命名法" tabindex="-1">2.1 入参符合小驼峰命名法 <a class="header-anchor" href="#_2-1-入参符合小驼峰命名法" aria-label="Permalink to &quot;2.1 入参符合小驼峰命名法&quot;">​</a></h3><p>后端定义前端传输字段（入参）要符合驼峰命名如：storeName；见名知意；后台返回字段（出参）也需符合驼峰命名，入参和出参字段命名须保持一致。</p><h3 id="_2-2-入参文字说明" tabindex="-1">2.2 入参文字说明 <a class="header-anchor" href="#_2-2-入参文字说明" aria-label="Permalink to &quot;2.2 入参文字说明&quot;">​</a></h3><p>请求参数（入参）所有字段必须标明参数说明、数据类型、是否必传，不要出现无用参数，容易误导前端开发者。</p><table><thead><tr><th>参数名称</th><th>参数说明</th><th>数据类型</th><th>是否必传</th></tr></thead><tbody><tr><td>dateList</td><td>月份列表</td><td>array</td><td>false</td></tr><tr><td>mainPeriod</td><td>时间统计维度： 2：季度，3：月，7：日，8：旬</td><td>integer</td><td>true</td></tr><tr><td>month</td><td>月份(实例：2023-01)</td><td>string</td><td>false</td></tr><tr><td>userType</td><td>用户类型：1：普通用户，2：战新用户，3：低压用户，4：全体用户</td><td>string</td><td>true</td></tr></tbody></table><h3 id="_2-3-枚举类型说明" tabindex="-1">2.3 枚举类型说明 <a class="header-anchor" href="#_2-3-枚举类型说明" aria-label="Permalink to &quot;2.3 枚举类型说明&quot;">​</a></h3><p>接口传值中涉及到需要枚举值的地方，是否可以考虑维护一个统一可扩展维护的字典，在 api 文档相应位置做出展示说明，保证统一性，方便 api 调用者查阅使用（枚举如果使用数字，尽量避免使用 0，因为使用 0 前端判断时可能出现漏判或者误判）。</p><h3 id="_2-4-分页字典和排序字段说明" tabindex="-1">2.4 分页字典和排序字段说明 <a class="header-anchor" href="#_2-4-分页字典和排序字段说明" aria-label="Permalink to &quot;2.4 分页字典和排序字段说明&quot;">​</a></h3><p>接口中涉及查询列表的地方，分页参数配置保持统一固定的传参方式，目前根据后端定义的分页参数示例</p><table><thead><tr><th>参数名称</th><th>pageParam</th></tr></thead><tbody><tr><td>currentPage</td><td>当前页码</td></tr><tr><td>pageSize</td><td>每页大小</td></tr><tr><td>orderType</td><td>1、顺序-ASC，2、倒序-DESC</td></tr><tr><td>sortName</td><td>排序字段</td></tr></tbody></table><h3 id="_2-5-时间字段说明" tabindex="-1">2.5 时间字段说明 <a class="header-anchor" href="#_2-5-时间字段说明" aria-label="Permalink to &quot;2.5 时间字段说明&quot;">​</a></h3><p>涉及到时间类型的传参根据目前的开发习惯固定为格式化的传递方式，如日期：“2023-01-01”，月份：“2023-01”，年份：“2023”，涉及传递时间段的参数统一规定传数组,[“2023-02-01”, “2023-02-20”]</p><h3 id="_2-6-删除接口说明" tabindex="-1">2.6 删除接口说明 <a class="header-anchor" href="#_2-6-删除接口说明" aria-label="Permalink to &quot;2.6 删除接口说明&quot;">​</a></h3><p>涉及到列表的删除接口，为了保持风格统一，希望全部支持批量删除，请求方式统一为 post，传参形式为数组[1,2,3…]。</p><h2 id="_3、返回数据" tabindex="-1">3、返回数据 <a class="header-anchor" href="#_3、返回数据" aria-label="Permalink to &quot;3、返回数据&quot;">​</a></h2><h3 id="_3-1-顶层结构" tabindex="-1">3.1 顶层结构 <a class="header-anchor" href="#_3-1-顶层结构" aria-label="Permalink to &quot;3.1 顶层结构&quot;">​</a></h3><p>后台返回数据字段需都在 data 里，不得在 data 之外，data 必须是一个对象，即使里面 data 只有一类数据</p><h3 id="_3-2-数据结构" tabindex="-1">3.2 数据结构 <a class="header-anchor" href="#_3-2-数据结构" aria-label="Permalink to &quot;3.2 数据结构&quot;">​</a></h3><p>后台返回值为空时，需返回相对应的键名如：{listData: null} ，键值为空时值为 null，如果返回参数是多层对象嵌套，在数据为空时需要保证返回结构完整。（需要特殊处理的是图表数据如果为空时，需要返回完整的数据结构，例如价格数据为空，x 轴数据是[“00:15”, “00:30”, …]，那么价格数据对应的 list 数组需要返回[null,null,…]，特别说明：null 和 0 是两种情况)。</p><h3 id="_3-3-返回参数说明" tabindex="-1">3.3 返回参数说明 <a class="header-anchor" href="#_3-3-返回参数说明" aria-label="Permalink to &quot;3.3 返回参数说明&quot;">​</a></h3><p>返回参数（响应参数）需要做出适当的参数说明，这样可以规避在返回参数较多的情况下前端调用者理解错误参数用意导致页面数据渲染出现偏差。</p><h3 id="_3-4-表格数据和图表数据" tabindex="-1">3.4 表格数据和图表数据 <a class="header-anchor" href="#_3-4-表格数据和图表数据" aria-label="Permalink to &quot;3.4 表格数据和图表数据&quot;">​</a></h3><p>表格（table）数据应该返回一个 list 数组,数组包含 n 个对象，一个对象表示一行数据（实际大多数应用场景下表格数据都是以行为单位来处理的），涉及到页面有图表和表格切换，如果后端方便可同时返回图表和表格数据，如果嫌麻烦可返回完整的表格数据，前端根据表格数据封装图表数据。</p><h3 id="_3-5-特殊参数说明" tabindex="-1">3.5 特殊参数说明 <a class="header-anchor" href="#_3-5-特殊参数说明" aria-label="Permalink to &quot;3.5 特殊参数说明&quot;">​</a></h3><h4 id="_3-5-1-级联选择器传值" tabindex="-1">3.5.1 级联选择器传值 <a class="header-anchor" href="#_3-5-1-级联选择器传值" aria-label="Permalink to &quot;3.5.1 级联选择器传值&quot;">​</a></h4><p>前端传值使用数组（尽量使用 post 请求，如为 get 请求则以字符串拼接方式进行传值，例如：”1,3”），回显方式为两种：</p><p>（1）可编辑页面后端返回的值必须是数组；</p><p>（2）详情页面在返回对应值的数组的同时还需返回对应的 name，方便展示</p><h4 id="_3-5-2-switch-开关传值" tabindex="-1">3.5.2 switch 开关传值 <a class="header-anchor" href="#_3-5-2-switch-开关传值" aria-label="Permalink to &quot;3.5.2 switch 开关传值&quot;">​</a></h4><p>涉及到 switch 开关控制器的 value 值希望能统一，0/1、true/false 二选一使用一种即可，形成一种默契。使用 0/1 时需要统一风格，即 0 表示关闭，1 表示打开。</p><h3 id="_3-6-文件下载说明" tabindex="-1">3.6 文件下载说明 <a class="header-anchor" href="#_3-6-文件下载说明" aria-label="Permalink to &quot;3.6 文件下载说明&quot;">​</a></h3><p>所有的下载文件接口文件名均由后台进行返回，后台开发人员将文件名添加在返回体 header 中的 Content-disposition 参数中，具体值的格式为：attachment; filename=fileName，并且需要配置 Access-Control-Expose-Headers 参数的值为：Content-Disposition，暴露相应参数以便前端开发人员可以取到文件名，注意需要对文件名进行 utf-8 编码，防止文件名出现乱码;</p><div class="tip custom-block"><p class="custom-block-title">后端具体配置代码如下：</p><p>对文件名进行编码，防止出现乱码</p><p>String fileName = URLEncoder.encode(fileName,&quot;utf-8&quot;);</p><p>添加文件名</p><p>response.setHeader(&quot;Content-Disposition&quot;, &quot;attachment; filename=fileName&quot;);</p><p>暴露 Content-Disposition 参数给前端，用于获取文件名</p><p>response.setHeader(&quot;Access-Control-Expose-Headers&quot;, &quot;Content-Disposition&quot;);</p></div><p>前端代码处理</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (response.headers[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Content-Disposition&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response.headers[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Content-Disposition&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">substring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(str.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">indexOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;=&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, str.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  data.fileName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> decodeURI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(str);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,42),h=[n];function l(r,d,o,p,k,c){return i(),t("div",null,h)}const _=a(e,[["render",l]]);export{E as __pageData,_ as default};
