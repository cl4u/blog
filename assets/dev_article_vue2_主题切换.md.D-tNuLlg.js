import{_ as e,c as s,o as a,a5 as t}from"./chunks/framework.t2hUVk8X.js";const l="/blog/assets/theme1.Dtw990sV.png",i="/blog/assets/theme2.Rd8J0a7z.png",p="/blog/assets/theme3.BMOlAAtk.png",_=JSON.parse('{"title":"主题切换","description":"","frontmatter":{},"headers":[],"relativePath":"dev/article/vue2/主题切换.md","filePath":"dev/article/vue2/主题切换.md","lastUpdated":1711524864000}'),n={name:"dev/article/vue2/主题切换.md"},c=t('<h1 id="主题切换" tabindex="-1">主题切换 <a class="header-anchor" href="#主题切换" aria-label="Permalink to &quot;主题切换&quot;">​</a></h1><p>在后台管理系统中主题切换是很常见的一种操作，以下是 vue2 项目中的相关配置。</p><p>技术栈： vue2 + elementUi</p><h2 id="_1-安装主题生成工具" tabindex="-1">1 安装主题生成工具 <a class="header-anchor" href="#_1-安装主题生成工具" aria-label="Permalink to &quot;1 安装主题生成工具&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span> npm i element-theme -g</span></span></code></pre></div><h2 id="_2-安装白垩主题" tabindex="-1">2 安装白垩主题 <a class="header-anchor" href="#_2-安装白垩主题" aria-label="Permalink to &quot;2 安装白垩主题&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span> npm i element-theme-chalk -D</span></span></code></pre></div><h2 id="_3-初始化变量文件" tabindex="-1">3 初始化变量文件 <a class="header-anchor" href="#_3-初始化变量文件" aria-label="Permalink to &quot;3 初始化变量文件&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>et -i</span></span></code></pre></div><p>执行完以上命令后，会在根目录下会生成 element-variables.scss 文件，里边包含了 elementui 中组件所用到的所有变量，像字体大小，颜色，背景颜色等。 <img src="'+l+`" class="theme-image"></p><p>如果项目有自己的设计稿，并且对字体颜色、按钮颜色等有严格要求，可以在这个文件找到对应属性进行修改，修改完成之后执行 et 编译主题</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>et</span></span></code></pre></div><p>这时根目录下会生成 theme 文件夹，里边有 fonts 和一些 css 文件，这里的 fonts 文件会有用，其他 css 文件可以删除了。</p><div class="tip custom-block"><p class="custom-block-title">重点说明：</p><p>将 element-variables.scss 修改名称为 element-variables-dark.scss,然后在执行第三步（初始化变量文件），这样根目录会重新生成一份 element-varibles.scss 文件，对里边的颜色、背景颜色更改保存，改名称为 element-variables-light.scss，这里保存的是清亮模式的文件。</p></div><h2 id="_4-使用-gulp-css-wrap-神器" tabindex="-1">4 使用 gulp-css-wrap 神器 <a class="header-anchor" href="#_4-使用-gulp-css-wrap-神器" aria-label="Permalink to &quot;4 使用 gulp-css-wrap 神器&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npm install gulp</span></span>
<span class="line"><span>npm install gulp-clean-css</span></span>
<span class="line"><span>npm install gulp-css-wrap</span></span></code></pre></div><h2 id="_5-在根目录下创建-gulpfile-js-文件" tabindex="-1">5 在根目录下创建 gulpfile.js 文件 <a class="header-anchor" href="#_5-在根目录下创建-gulpfile-js-文件" aria-label="Permalink to &quot;5 在根目录下创建 gulpfile.js 文件&quot;">​</a></h2><img src="`+i+'" class="theme-image set-bg"><p>截图中.custom-light 选择器是定义了清亮模式下在 body 中添加的类属性， src/assets/theme/light 这块是存放清亮模式的主题文件。文件夹中包含 fonts 和 index.css，这里的 fonts 就是之前根目录 theme 下的 fonts，是复制过来的，index.css 文件则是真正的主题引入的文件。</p><div class="tip custom-block"><p class="custom-block-title">重要说明：</p><p>不管对暗黑模式还是清亮模式进行修改，首先修改根目录下两种模式对应的 element-variables-light.scss 文件，修改为 element-variables.scss，系统才会识别出来，然后在执行 et -i,修改完之后在执行 et 编译主题。</p></div><h2 id="_6-执行-gulp-输出" tabindex="-1">6 执行 gulp 输出 <a class="header-anchor" href="#_6-执行-gulp-输出" aria-label="Permalink to &quot;6 执行 gulp 输出&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>gulp css-wrap</span></span></code></pre></div><h2 id="_7-在-main-js-中引入" tabindex="-1">7 在 main.js 中引入 <a class="header-anchor" href="#_7-在-main-js-中引入" aria-label="Permalink to &quot;7 在 main.js 中引入&quot;">​</a></h2><img src="'+p+`" class="theme-image set-bg"><h2 id="_8-遇到的坑" tabindex="-1">8 遇到的坑 <a class="header-anchor" href="#_8-遇到的坑" aria-label="Permalink to &quot;8 遇到的坑&quot;">​</a></h2><p>因为安装 gulp，gulp 的版本和 node 不兼容,执行 et -i 时报错：primordials is not defined；</p><div class="tip custom-block"><p class="custom-block-title">解决方案：</p><p>gulp3.x.x 需要将 node 降低到 11.x.x</p><p>要么降低 node 版本为 12 以下，要么升级 gulp 为 4.x 版本。</p></div><p>这个报错终于解决了，又出现了其他报错，没有发现 chalk，我自己单独装了下，还是报错，最后发现还是版本的问题。</p><p>node v10.16.0 版本 如下安装:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npm i element-theme -g</span></span>
<span class="line"><span>npm i element-theme-chalk -D</span></span></code></pre></div><p>node v12.13.0 版本 如下安装:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npm i element-themex -g</span></span>
<span class="line"><span>npm i element-theme-chalk -D</span></span></code></pre></div><p>版本不同，引入的 element 主题不一样，高版本用的是 element-themex，这个在官网上没有找到，希望可以帮到大家，其他的就是使用主题了，很简单，写一个 el-switch 开关对主题进行设置，利用 vuex 进行全局保存就可以了。</p>`,33),o=[c];function h(d,r,m,u,g,b){return a(),s("div",null,o)}const k=e(n,[["render",h]]);export{_ as __pageData,k as default};
