import{_ as a,c as s,o as n,a5 as e}from"./chunks/framework.t2hUVk8X.js";const g=JSON.parse('{"title":"文件目录命名规范","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"doc/rule/code/index.md","filePath":"doc/rule/code/index.md","lastUpdated":1709812522000}'),t={name:"doc/rule/code/index.md"},p=e(`<h1 id="文件目录命名规范" tabindex="-1">文件目录命名规范 <a class="header-anchor" href="#文件目录命名规范" aria-label="Permalink to &quot;文件目录命名规范&quot;">​</a></h1><p>该目录下包含 项目文件命名、Vue 组件命名、代码参数命名。</p><h2 id="_1、项目文件命名" tabindex="-1">1、项目文件命名 <a class="header-anchor" href="#_1、项目文件命名" aria-label="Permalink to &quot;1、项目文件命名&quot;">​</a></h2><h3 id="_1-1-项目命名" tabindex="-1">1.1 项目命名 <a class="header-anchor" href="#_1-1-项目命名" aria-label="Permalink to &quot;1.1 项目命名&quot;">​</a></h3><p>全部采用小写方式，以下划线分隔。如 my_project_name 等。</p><h3 id="_1-2-目录命名" tabindex="-1">1.2 目录命名 <a class="header-anchor" href="#_1-2-目录命名" aria-label="Permalink to &quot;1.2 目录命名&quot;">​</a></h3><p>命名方式遵循小驼峰命名法，但是有复数时，要采用复数命名方式。 如:images,modules 等。</p><h3 id="_1-3-html-文件命名" tabindex="-1">1.3 HTML 文件命名 <a class="header-anchor" href="#_1-3-html-文件命名" aria-label="Permalink to &quot;1.3 HTML 文件命名&quot;">​</a></h3><p>全部采用小写方式， 优先选择单个单词命名，多个单词命名以下划线分隔。 如：form_detail.html 等。</p><h3 id="_1-4-css-文件命名" tabindex="-1">1.4 CSS 文件命名 <a class="header-anchor" href="#_1-4-css-文件命名" aria-label="Permalink to &quot;1.4 CSS 文件命名&quot;">​</a></h3><p>全部采用小写方式， 优先选择单个单词命名，多个单词命名以短横线分隔。 如：base.css,form-input.css 等。</p><h3 id="_1-5-javascript-文件命名" tabindex="-1">1.5 Javascript 文件命名 <a class="header-anchor" href="#_1-5-javascript-文件命名" aria-label="Permalink to &quot;1.5 Javascript 文件命名&quot;">​</a></h3><p>全部采用小写方式， 优先选择单个单词命名，多个单词命名以小驼峰为准。 如：validate.js,setStyle.js 等。</p><h3 id="_1-6-图片文件命名" tabindex="-1">1.6 图片文件命名 <a class="header-anchor" href="#_1-6-图片文件命名" aria-label="Permalink to &quot;1.6 图片文件命名&quot;">​</a></h3><p>全部采用小写方式， 优先选择单个单词命名，多个单词命名以下划线分隔。 如;logo.png,side_tab.png 等。</p><h2 id="_2、vue-组件命名" tabindex="-1">2、Vue 组件命名 <a class="header-anchor" href="#_2、vue-组件命名" aria-label="Permalink to &quot;2、Vue 组件命名&quot;">​</a></h2><h3 id="_2-1-文件命名" tabindex="-1">2.1 文件命名 <a class="header-anchor" href="#_2-1-文件命名" aria-label="Permalink to &quot;2.1 文件命名&quot;">​</a></h3><p>一般 views 下的.vue 文件命名都是使用中划线命名规则，如：user-add.vue 等。 views 下的文件是用中划线，component 是用单数。</p><h3 id="_2-2-全局公共组件命名" tabindex="-1">2.2 全局公共组件命名 <a class="header-anchor" href="#_2-2-全局公共组件命名" aria-label="Permalink to &quot;2.2 全局公共组件命名&quot;">​</a></h3><p>文件扩展名为 .vue 的 single-file components (单文件组件)。单文件组件名应该始终是中划线风格 (kebab-case)。 如：custom-batch-import.vue 等。</p><h4 id="_2-2-1-基础组件名" tabindex="-1">2.2.1 基础组件名 <a class="header-anchor" href="#_2-2-1-基础组件名" aria-label="Permalink to &quot;2.2.1 基础组件名&quot;">​</a></h4><p>基础组件：不包含业务，独立、具体功能的基础组件，比如日期选择器、模态框等。 这类组件作为项目的基础控件，会被大量使用。</p><p>像这种不掺杂业务逻辑或者没有逻辑的基础组件，应该使用统一的前 base,如：base-button.vue、base-pagination.vue 等</p><h4 id="_2-2-2-业务组件名" tabindex="-1">2.2.2 业务组件名 <a class="header-anchor" href="#_2-2-2-业务组件名" aria-label="Permalink to &quot;2.2.2 业务组件名&quot;">​</a></h4><p>它不像基础组件只包含某个功能，而是在业务中被多个页面复用的（具有可复用性），它与基础组件的区别是，业务组件只在当前项目中会用到，不具有通用性，而且会包含一些业务，比如数据请求；而基础组件不含业务，在任何项目中都可以使用，功能单一，比如一个具有数据校验功能的输入框。</p><p>掺杂了复杂业务的组件（拥有自身 data、prop 的相关处理）即业务组件应该以 Custom 前缀命名。 如：custom-batch-import.vue 等。</p><h4 id="_2-2-3-单例组件名" tabindex="-1">2.2.3 单例组件名 <a class="header-anchor" href="#_2-2-3-单例组件名" aria-label="Permalink to &quot;2.2.3 单例组件名&quot;">​</a></h4><p>这不意味着组件只可用于一个单页面，而是每个页面只使用一次。这些组件永远不接受任何 prop，因为它们是为你的应用定制的，而不是它们在你的应用中的上下文。如果你发现有必要添加 prop，那就表明这实际上是一个可复用的组件，只是目前在每个页面里只使用一次。</p><p>只应该拥有单个活跃实例的组件应该以  The  前缀命名，以示其唯一性。</p><h3 id="_2-3-紧密耦合的组件名" tabindex="-1">2.3 紧密耦合的组件名 <a class="header-anchor" href="#_2-3-紧密耦合的组件名" aria-label="Permalink to &quot;2.3 紧密耦合的组件名&quot;">​</a></h3><p>如果一个组件只在某个父组件的场景下有意义，这层关系应该体现在其名字上。因为编辑器通常会按字母顺序组织文件，所以这样做可以把相关联的文件排在一起。</p><p>和父组件紧密耦合的子组件应该以父组件名作为前缀命名。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>components/</span></span>
<span class="line"><span>|- todo-list.vue</span></span>
<span class="line"><span>|- todo-list-item.vue</span></span>
<span class="line"><span>|- todo-list-item-button.vue</span></span></code></pre></div><h3 id="_2-4-组件名中的单词顺序" tabindex="-1">2.4 组件名中的单词顺序 <a class="header-anchor" href="#_2-4-组件名中的单词顺序" aria-label="Permalink to &quot;2.4 组件名中的单词顺序&quot;">​</a></h3><p>组件名应该以高级别的 (通常是一般化描述的) 单词开头，以描述性的修饰词结尾。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>components/</span></span>
<span class="line"><span>|- search-button-clear.vue</span></span>
<span class="line"><span>|- search-button-run.vue</span></span>
<span class="line"><span>|- search-input-query.vue</span></span>
<span class="line"><span>|- search-input-exclude-glob.vue</span></span>
<span class="line"><span>|- settings-checkbox-terms.vue</span></span></code></pre></div><h3 id="_2-5-完整单词的组件名" tabindex="-1">2.5 完整单词的组件名 <a class="header-anchor" href="#_2-5-完整单词的组件名" aria-label="Permalink to &quot;2.5 完整单词的组件名&quot;">​</a></h3><p>组件名称使用完整单词进行命名，禁止使用单词缩写。如：update-bind-statue.vue 等。</p><h2 id="_3、代码参数命名" tabindex="-1">3、代码参数命名 <a class="header-anchor" href="#_3、代码参数命名" aria-label="Permalink to &quot;3、代码参数命名&quot;">​</a></h2><h3 id="_3-1-prop-命名" tabindex="-1">3.1 prop 命名 <a class="header-anchor" href="#_3-1-prop-命名" aria-label="Permalink to &quot;3.1 prop 命名&quot;">​</a></h3><p>在声明 prop 的时候，其命名应该始终使用 camelCase，而在模板和 JSX 中应该始终使用 kebab-case。我们单纯的遵循每个语言的约定，在 JavaScript 中自然是 camelCase。而在 HTML 中则是 kebab-case。</p><p>如父组件引用子组件：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&lt;add-user :show-add-dialog=&quot;showAddDialog&quot;&gt;&lt;/add-user&gt;</span></span></code></pre></div><p>子组件接收传值:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>export default{</span></span>
<span class="line"><span>  name: &quot;AddUser&quot;,</span></span>
<span class="line"><span>  props: {</span></span>
<span class="line"><span>    showAddDialog: {</span></span>
<span class="line"><span>      type: Object,</span></span>
<span class="line"><span>      default: () =&gt; ({})</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre></div><h3 id="_3-2-路由命名规范" tabindex="-1">3.2 路由命名规范 <a class="header-anchor" href="#_3-2-路由命名规范" aria-label="Permalink to &quot;3.2 路由命名规范&quot;">​</a></h3><p>path 命名规范采用 kebab-case 命名规范（尽量与 vue 文件的目录结构保持一致，因为目录、文件名都是 kebab-case，这样很方便找到对应的文件） name 命名规范采用 KebabCase 命名规范且和 component 组件名保持一致！（因为要保持 keep-alive 特性，keep-alive 按照 component 的 name 进行缓存，所以两者必须高度保持一致）</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>// 动态加载</span></span>
<span class="line"><span>export const reload = [</span></span>
<span class="line"><span>  {</span></span>
<span class="line"><span>    path: &#39;/reload&#39;,</span></span>
<span class="line"><span>    name: &#39;reload&#39;,</span></span>
<span class="line"><span>    component: Main,</span></span>
<span class="line"><span>    meta: {</span></span>
<span class="line"><span>      title: &#39;动态加载&#39;,</span></span>
<span class="line"><span>      icon: &#39;icon iconfont&#39;</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>    children: [</span></span>
<span class="line"><span>      {</span></span>
<span class="line"><span>        path: &#39;/reload/smart-reload-list&#39;,</span></span>
<span class="line"><span>        name: &#39;SmartReloadList&#39;,</span></span>
<span class="line"><span>        meta: {</span></span>
<span class="line"><span>          title: &#39;SmartReload&#39;,</span></span>
<span class="line"><span>        },</span></span>
<span class="line"><span>        component: () =&gt;</span></span>
<span class="line"><span>          import(&#39;@/views/reload/smart-reload/smart-reload-list.vue&#39;)</span></span>
<span class="line"><span>      }</span></span>
<span class="line"><span>    ]</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>];</span></span></code></pre></div><h3 id="_3-3-模板中的组件" tabindex="-1">3.3 模板中的组件 <a class="header-anchor" href="#_3-3-模板中的组件" aria-label="Permalink to &quot;3.3 模板中的组件&quot;">​</a></h3><p>一般在父组件引入子组件使用大驼峰，在 dom 中引用使用中划线，即 kebab-case。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&lt;add-user :show-add-dialog=&quot;showAddDialog&quot;&gt;&lt;/add-user&gt;</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>import AddUser from &quot;./component/add-user.vue&quot;;</span></span></code></pre></div><h3 id="_3-4-变量命名" tabindex="-1">3.4 变量命名 <a class="header-anchor" href="#_3-4-变量命名" aria-label="Permalink to &quot;3.4 变量命名&quot;">​</a></h3><p>变量命名规则是类型+对象描述的方式，一般使用小驼峰形式。如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let dialogTitle = &quot;弹窗名称&quot;;</span></span>
<span class="line"><span>let addContractTitle = &quot;新增合同&quot;</span></span></code></pre></div><h3 id="_3-5-常量命名" tabindex="-1">3.5 常量命名 <a class="header-anchor" href="#_3-5-常量命名" aria-label="Permalink to &quot;3.5 常量命名&quot;">​</a></h3><p>常量命名规则是大写字母+下划线分割单词。如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>const ELECTRO_TYPE = [];</span></span>
<span class="line"><span>const STEP_NUM = 1;</span></span></code></pre></div><h3 id="_3-6-方法命名" tabindex="-1">3.6 方法命名 <a class="header-anchor" href="#_3-6-方法命名" aria-label="Permalink to &quot;3.6 方法命名&quot;">​</a></h3><p>一般使用动词+名词命名，使用小驼峰形式。如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>// 跳转页面</span></span>
<span class="line"><span>jumpPage() {</span></span>
<span class="line"><span>  //</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>如果方法中的数据处理逻辑比较多，需要写 handle 函数对数据进行处理，一般是方法后+handle,如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>// 获取页面列表</span></span>
<span class="line"><span>getContractList() {</span></span>
<span class="line"><span>  getContractList().then(res =&gt; {</span></span>
<span class="line"><span>    if (res) {</span></span>
<span class="line"><span>      this.getContractListHandle(res.data);</span></span>
<span class="line"><span>    } else {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  })</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>// 数据处理函数</span></span>
<span class="line"><span>getContractListHandle(data) {</span></span>
<span class="line"><span>  //</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>以下为一般命名方法名称前缀，可以语义化的知道该方法作用</p><details class="details custom-block"><summary>示例</summary><table><thead><tr><th style="text-align:left;">动词</th><th style="text-align:center;">含义</th><th style="text-align:right;">返回值</th></tr></thead><tbody><tr><td style="text-align:left;">can</td><td style="text-align:center;">判断是否可执行某个动作函数</td><td style="text-align:right;">true：可执行；false：不可执行</td></tr><tr><td style="text-align:left;">has</td><td style="text-align:center;">判断是否含有某个值函数</td><td style="text-align:right;">true：含有此值；false：不含有此值</td></tr><tr><td style="text-align:left;">is</td><td style="text-align:center;">判断是否为某个值函数</td><td style="text-align:right;">true：为某个值；false：不为某个值</td></tr><tr><td style="text-align:left;">get</td><td style="text-align:center;">获取某个值</td><td style="text-align:right;">函数返回一个非布尔值</td></tr><tr><td style="text-align:left;">set</td><td style="text-align:center;">设置某个值</td><td style="text-align:right;">无返回值、返回是否设置成功</td></tr></tbody></table></details><h3 id="_3-7-自定义事件命名" tabindex="-1">3.7 自定义事件命名 <a class="header-anchor" href="#_3-7-自定义事件命名" aria-label="Permalink to &quot;3.7 自定义事件命名&quot;">​</a></h3><p>自定义事件应始终使用 kebab-case 的事件名。不同于组件和 prop，事件名不存在任何自动化的大小写转换。并且  v-on  事件监听器在 DOM 模板中会被自动转换为全小写。</p><p>父组件</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>// 在dom中，监听事件会自动转换大小写，所以全部写成中划线形式，可以优化代码。</span></span>
<span class="line"><span>&lt;get-bind-status @get-status=&quot;getStatus&quot;&gt;&lt;/get-bind-status&gt;</span></span></code></pre></div><p>子组件</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>// 事件调用时不会自动转换大小写</span></span>
<span class="line"><span>this.$emit(&quot;get-status&quot;)</span></span></code></pre></div><h3 id="_3-8-事件方法命名" tabindex="-1">3.8 事件方法命名 <a class="header-anchor" href="#_3-8-事件方法命名" aria-label="Permalink to &quot;3.8 事件方法命名&quot;">​</a></h3><p>使用 handle + 名词 + 动词规范命名，一般使用小驼峰命名。如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>// 下拉框</span></span>
<span class="line"><span>&lt;el-select @change=&quot;handleItemChange&quot;&gt;&lt;/el-select&gt;</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>// 提交按钮</span></span>
<span class="line"><span>&lt;el-button @click=&quot;handleFormSubmit&quot;&gt;&lt;/el-button&gt;</span></span></code></pre></div><h3 id="_3-9-中划线和小驼峰命名" tabindex="-1">3.9 中划线和小驼峰命名 <a class="header-anchor" href="#_3-9-中划线和小驼峰命名" aria-label="Permalink to &quot;3.9 中划线和小驼峰命名&quot;">​</a></h3><p>一般在 html 中，class 和 id 命名有多个字母，使用中划线分割，如：class=&quot;user-info&quot;。</p><p>一般在 js 中，定义变量时使用小驼峰命名，如：let userInfo = [];</p>`,76),l=[p];function i(o,c,d,r,h,u){return n(),s("div",null,l)}const m=a(t,[["render",i]]);export{g as __pageData,m as default};
